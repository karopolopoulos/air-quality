service: air-quality

plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2

resources:
  Resources:
    PiThing:
      Type: AWS::IoT::Thing
      Properties:
        ThingName: ${self:service}-${self:provider.stage}-raspberry-pi

    # PiCertificate:
    #   Type: AWS::IoT::Certificate
    #   Properties:
    #     CertificateSigningRequest: #certificate
    #     Status: ACTIVE

    PiPolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - iot:*
              Resource: "*"

    PiPrincipleAttachment:
      Type: AWS::IoT::PolicyPrincipalAttachment
      Properties:
        PolicyName:
          Ref: PiPolicy
        Principal: arn:aws:iot:ap-southeast-2:085082512559:cert/cce29d782080cbaf2e0d0db5b6510dd71093536ad523e732be7ea422aaeb49be

    PiThingAttachment:
      Type: AWS::IoT::ThingPrincipalAttachment
      Properties:
        Principal: arn:aws:iot:ap-southeast-2:085082512559:cert/cce29d782080cbaf2e0d0db5b6510dd71093536ad523e732be7ea422aaeb49be
        ThingName:
          Ref: PiThing

    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: aqi-topic
        Subscription:
          - Protocol: email
            Endpoint: ${env:NOTIFICATION_EMAIL}
          - Protocol: sms
            Endpoint: ${env:NOTIFICATION_PHONE_NUMBER}

    SNSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: ""
              Effect: "Allow"
              Principal:
                Service: "iot.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-sns-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sns:Publish"
                  Resource: "*"

    Aqi25TopicRule:
      Type: AWS::IoT::TopicRule
      Properties:
        RuleName: aqi_2_5_rule
        TopicRulePayload:
          Actions:
            - Sns:
                MessageFormat: RAW
                RoleArn:
                  Fn::GetAtt: SNSRole.Arn
                TargetArn:
                  Ref: SNSTopic
          RuleDisabled: false
          Sql: SELECT aqi AS aqi2_5 FROM 'air-quality.melbourne-aqi-two-five' WHERE aqi > 50

    Aqi10TopicRule:
      Type: AWS::IoT::TopicRule
      Properties:
        RuleName: aqi_10_rule
        TopicRulePayload:
          Actions:
            - Sns:
                MessageFormat: RAW
                RoleArn:
                  Fn::GetAtt: SNSRole.Arn
                TargetArn:
                  Ref: SNSTopic
          RuleDisabled: false
          Sql: SELECT aqi AS aqi10 FROM 'air-quality.melbourne-aqi-10' WHERE aqi > 50
  # look at greengrass
